"""Add Frames and Glazing

Revision ID: f698f1beb0bd
Revises: 8315a8164db8
Create Date: 2025-07-07 17:52:12.487782

"""

from typing import Sequence, Union

import sqlalchemy as sa

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "f698f1beb0bd"
down_revision: Union[str, None] = "8315a8164db8"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "aperture_element_frame",
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("name", sa.String(length=255), nullable=False),
        sa.Column("width_mm", sa.Float(), nullable=False),
        sa.Column("u_value_w_m2k", sa.Float(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_aperture_element_frame_id"), "aperture_element_frame", ["id"], unique=False)
    op.create_table(
        "aperture_element_glazing",
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("name", sa.String(length=255), nullable=False),
        sa.Column("u_value_w_m2k", sa.Float(), nullable=False),
        sa.Column("g_value", sa.Float(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_aperture_element_glazing_id"), "aperture_element_glazing", ["id"], unique=False)

    # Add name column as nullable first, then populate and set NOT NULL
    op.add_column("aperture_elements", sa.Column("name", sa.String(length=255), nullable=True))
    op.execute("UPDATE aperture_elements SET name = 'Unnamed' WHERE name IS NULL")
    op.alter_column("aperture_elements", "name", nullable=False, server_default="Unnamed")

    op.add_column("aperture_elements", sa.Column("glazing_id", sa.String(), nullable=True))
    op.add_column("aperture_elements", sa.Column("frame_top_id", sa.String(), nullable=True))
    op.add_column("aperture_elements", sa.Column("frame_right_id", sa.String(), nullable=True))
    op.add_column("aperture_elements", sa.Column("frame_bottom_id", sa.String(), nullable=True))
    op.add_column("aperture_elements", sa.Column("frame_left_id", sa.String(), nullable=True))
    op.alter_column("aperture_elements", "name", existing_type=sa.VARCHAR(length=255), nullable=False)
    op.create_foreign_key(None, "aperture_elements", "aperture_element_frame", ["frame_left_id"], ["id"])
    op.create_foreign_key(None, "aperture_elements", "aperture_element_glazing", ["glazing_id"], ["id"])
    op.create_foreign_key(None, "aperture_elements", "aperture_element_frame", ["frame_bottom_id"], ["id"])
    op.create_foreign_key(None, "aperture_elements", "aperture_element_frame", ["frame_right_id"], ["id"])
    op.create_foreign_key(None, "aperture_elements", "aperture_element_frame", ["frame_top_id"], ["id"])
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, "aperture_elements", type_="foreignkey")
    op.drop_constraint(None, "aperture_elements", type_="foreignkey")
    op.drop_constraint(None, "aperture_elements", type_="foreignkey")
    op.drop_constraint(None, "aperture_elements", type_="foreignkey")
    op.drop_constraint(None, "aperture_elements", type_="foreignkey")
    op.alter_column("aperture_elements", "name", existing_type=sa.VARCHAR(length=255), nullable=True)
    op.drop_column("aperture_elements", "frame_left_id")
    op.drop_column("aperture_elements", "frame_bottom_id")
    op.drop_column("aperture_elements", "frame_right_id")
    op.drop_column("aperture_elements", "frame_top_id")
    op.drop_column("aperture_elements", "glazing_id")
    op.drop_index(op.f("ix_aperture_element_glazing_id"), table_name="aperture_element_glazing")
    op.drop_table("aperture_element_glazing")
    op.drop_index(op.f("ix_aperture_element_frame_id"), table_name="aperture_element_frame")
    op.drop_table("aperture_element_frame")
    # ### end Alembic commands ###
